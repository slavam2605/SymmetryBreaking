private void defaultSearchStrategy(Solver solver) {
		AbstractStrategy[] strats = new AbstractStrategy[5];
		int nb = 0;

		// INTEGER VARIABLES DEFAULT SEARCH STRATEGY
		IntVar[] ivars = excludeConstants(solver.retrieveIntVars());
		if (ivars.length > 0) {
			strats[nb++] = ISF.minDom_LB(ivars);
		}

		// BOOLEAN VARIABLES DEFAULT SEARCH STRATEGY
		BoolVar[] bvars = excludeConstants(solver.retrieveBoolVars());
		if (bvars.length > 0) {
			strats[nb++] = ISF.lexico_UB(bvars);
		}

		// SET VARIABLES DEFAULT SEARCH STRATEGY
		SetVar[] svars = excludeConstants(solver.retrieveSetVars());
		if (svars.length > 0) {
			strats[nb++] = SetStrategyFactory.force_minDelta_first(svars);
		}

		// GRAPH VARIABLES DEFAULT SEARCH STRATEGY
		GraphVar[] gvars = excludeConstants(solver.retrieveGraphVars());
		if (gvars.length > 0) {
			AbstractStrategy<GraphVar>[] gstrats = new AbstractStrategy[gvars.length];
			for (int g = 0; g < gvars.length; g++) {
				gstrats[g] = GraphStrategyFactory.graphLexico(gvars[g]);
			}
			strats[nb++] = new StrategiesSequencer(gstrats);
		}

		// REAL VARIABLES DEFAULT SEARCH STRATEGY
		RealVar[] rvars = excludeConstants(solver.retrieveRealVars());
		if (rvars.length > 0) {
			strats[nb] = new RealStrategy(rvars, new Cyclic(), new RealDomainMiddle());
		}

		if (nb==0) {
			// simply to avoid null pointers in case all variables are instantiated
			solver.set(ISF.minDom_LB(solver.ONE));
		}else{
			solver.set(Arrays.copyOf(strats, nb));
		}
	}

	private static <V extends Variable> V[] excludeConstants(V[] vars){
		int nb = 0;
		for(V v:vars){
			if((v.getTypeAndKind() & Variable.CSTE) == 0){
				nb++;
			}
		}
		if(nb==vars.length)return vars;
		V[] noCsts;
		switch (vars[0].getTypeAndKind() & Variable.KIND){
			case Variable.BOOL:	noCsts = (V[]) new BoolVar[nb];	break;
			case Variable.INT:	noCsts = (V[]) new IntVar[nb];	break;
			case Variable.SET:	noCsts = (V[]) new SetVar[nb];	break;
			case Variable.GRAPH:noCsts = (V[]) new GraphVar[nb];break;
			case Variable.REAL:	noCsts = (V[]) new RealVar[nb];	break;
			default:
				throw new UnsupportedOperationException();
		}
		nb = 0;
		for(V v:vars){
			if((v.getTypeAndKind() & Variable.CSTE) == 0){
				noCsts[nb++] = v;
			}
		}
		return noCsts;
	}